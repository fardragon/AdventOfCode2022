package main

import "testing"

var testInstructions = []instruction{
	addInstruction{15},
	addInstruction{-11},
	addInstruction{6},
	addInstruction{-3},
	addInstruction{5},
	addInstruction{-1},
	addInstruction{-8},
	addInstruction{13},
	addInstruction{4},
	noopInstruction{},
	addInstruction{-1},
	addInstruction{5},
	addInstruction{-1},
	addInstruction{5},
	addInstruction{-1},
	addInstruction{5},
	addInstruction{-1},
	addInstruction{5},
	addInstruction{-1},
	addInstruction{-35},
	addInstruction{1},
	addInstruction{24},
	addInstruction{-19},
	addInstruction{1},
	addInstruction{16},
	addInstruction{-11},
	noopInstruction{},
	noopInstruction{},
	addInstruction{21},
	addInstruction{-15},
	noopInstruction{},
	noopInstruction{},
	addInstruction{-3},
	addInstruction{9},
	addInstruction{1},
	addInstruction{-3},
	addInstruction{8},
	addInstruction{1},
	addInstruction{5},
	noopInstruction{},
	noopInstruction{},
	noopInstruction{},
	noopInstruction{},
	noopInstruction{},
	addInstruction{-36},
	noopInstruction{},
	addInstruction{1},
	addInstruction{7},
	noopInstruction{},
	noopInstruction{},
	noopInstruction{},
	addInstruction{2},
	addInstruction{6},
	noopInstruction{},
	noopInstruction{},
	noopInstruction{},
	noopInstruction{},
	noopInstruction{},
	addInstruction{1},
	noopInstruction{},
	noopInstruction{},
	addInstruction{7},
	addInstruction{1},
	noopInstruction{},
	addInstruction{-13},
	addInstruction{13},
	addInstruction{7},
	noopInstruction{},
	addInstruction{1},
	addInstruction{-33},
	noopInstruction{},
	noopInstruction{},
	noopInstruction{},
	addInstruction{2},
	noopInstruction{},
	noopInstruction{},
	noopInstruction{},
	addInstruction{8},
	noopInstruction{},
	addInstruction{-1},
	addInstruction{2},
	addInstruction{1},
	noopInstruction{},
	addInstruction{17},
	addInstruction{-9},
	addInstruction{1},
	addInstruction{1},
	addInstruction{-3},
	addInstruction{11},
	noopInstruction{},
	noopInstruction{},
	addInstruction{1},
	noopInstruction{},
	addInstruction{1},
	noopInstruction{},
	noopInstruction{},
	addInstruction{-13},
	addInstruction{-19},
	addInstruction{1},
	addInstruction{3},
	addInstruction{26},
	addInstruction{-30},
	addInstruction{12},
	addInstruction{-1},
	addInstruction{3},
	addInstruction{1},
	noopInstruction{},
	noopInstruction{},
	noopInstruction{},
	addInstruction{-9},
	addInstruction{18},
	addInstruction{1},
	addInstruction{2},
	noopInstruction{},
	noopInstruction{},
	addInstruction{9},
	noopInstruction{},
	noopInstruction{},
	noopInstruction{},
	addInstruction{-1},
	addInstruction{2},
	addInstruction{-37},
	addInstruction{1},
	addInstruction{3},
	noopInstruction{},
	addInstruction{15},
	addInstruction{-21},
	addInstruction{22},
	addInstruction{-6},
	addInstruction{1},
	noopInstruction{},
	addInstruction{2},
	addInstruction{1},
	noopInstruction{},
	addInstruction{-10},
	noopInstruction{},
	noopInstruction{},
	addInstruction{20},
	addInstruction{1},
	addInstruction{2},
	addInstruction{2},
	addInstruction{-6},
	addInstruction{-11},
	noopInstruction{},
	noopInstruction{},
	noopInstruction{},
}

func TestSolvePart1(t *testing.T) {
	testResult := solvePart1(testInstructions)

	if testResult != 13140 {
		t.Errorf("Expected: %d got %d", 13140, testResult)
	}
}

func TestSolvePart2(t *testing.T) {
	// Part 2 produces graphical output

	testResult := solvePart2(testInstructions)
	expectedOutput := []string{
		"##..##..##..##..##..##..##..##..##..##..",
		"###...###...###...###...###...###...###.",
		"####....####....####....####....####....",
		"#####.....#####.....#####.....#####.....",
		"######......######......######......####",
		"#######.......#######.......#######.....",
	}

	if len(expectedOutput) != 6 {
		t.Errorf("Invalid output size, expected: %d got %d", 6, len(testResult))
	}

	for i := 0; i < 6; i++ {
		if testResult[i] != expectedOutput[i] {
			t.Errorf("Invalid output line %d, expected: %s got %s", i, expectedOutput[i], testResult[i])
		}
	}
}
